# Challenge: Given the array...

words =  ['demo', 'none', 'tied', 'evil', 'dome', 'mode', 'live',
  'fowl', 'veil', 'wolf', 'diet', 'vile', 'edit', 'tide',
  'flow', 'neon']

# .group_by - Groups the collection of an array by the result of the block.
# .each_char - Passes each character in a string to the block
# .sort - Sorts each element of enumerator using a set of keys generated by mapping the values of each element 
#     through the block.
# .values - Returns new array populated with the values from the hash
# Summary
# 1. Iterate each word in the word array. 
# 2. Iterate each character of each word.
# 3. Sort the characters of each word (alphabetically) and generate a key => value hash.
# 4. Return only the values of the key value hash.
# 5. Group the return by the values and return that as an array.

def anagram(word_array)
output = word_array.group_by { |word| word.each_char.sort}.values
end

# Write a program that prints out groups of words that are anagrams. 
# Anagrams are words that have the same exact letters in them but in a different order. Your output should look something like this:
# ["demo", "dome", "mode"]
# ["neon", "none"]
# (etc)

p anagram(words)